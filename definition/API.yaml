openapi: "3.0.0"

info:
  version: Draft
  title: Synergy API
  description: ""
  license:
    name: MIT

servers:
  - url: http://localhost:3000 #http://api.synergatika.gr

paths:
  # Paths: Authentication
  /auth/authenticate:
    post:
      summary: "Authenticate users"
      operationId: authAuthenticate
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/AuthenticationRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Authenticate'
        '202':
         $ref: '#/components/responses/Verification_Required'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/auto-register/member:
    post:
      summary: "Auto-Register new user (only as member)"
      operationId: authRegister
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/register/member:
    post:
      summary: "Register/Invite a new member (only for admins or partners)"
      operationId: authRegisterMember
      security:
        - bearerAuth: []
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/RegisterMemberRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/register/partner:
    post:
      summary: "Register/Invite a new partner (only for partners)"
      operationId: authRegisterPartner
      security:
        - bearerAuth: []
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/RegisterPartnerRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/set_pass/{email}:
    put:
      summary: "An invited user changes the password"
      operationId: changePassMiddle
      tags:
        - authentication
      parameters:
          - $ref: '#/components/parameters/email'
      requestBody:
        $ref: '#/components/requestBodies/ChangePassInRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/change_pass:
    put:
      summary: "A logged in user changes the password"
      operationId: changePassInside
      security:
        - bearerAuth: []
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ChangePassInRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/verify_email/{email}:
    get:
      summary: "Ask for email validation"
      operationId: askVerification
      parameters:
        - $ref: '#/components/parameters/email'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
  /auth/verify_email:
    post:
      summary: "Checks if link is valid and verify email"
      operationId: checkVerification
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/forgot_pass/{email}:
    get:
      summary: "Ask for password restoration"
      operationId: askRestoration
      parameters:
        - $ref: '#/components/parameters/email'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
  /auth/forgot_pass:
    post:
      summary: "Checks if link is valid and procced"
      operationId: checkRestoration
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    put:
      summary: "A no logged in user changes the password"
      operationId: changePassOutside
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ChangePassOutRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/check_identifier/{identifier}:
    get:
      summary: "Check if email or card is linked to any account"
      operationId: checkIdentifier
      parameters:
        - $ref: '#/components/parameters/identifier'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/Registration_Status'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/link_email/{card}:
    put:
      summary: "Check if email or card is linked to any account"
      operationId: linkEmail
      parameters:
        - $ref: '#/components/parameters/card'
      requestBody:
        $ref: '#/components/requestBodies/EmailRequestBody'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/link_card/{email}:
    put:
      summary: "Check if email or card is linked to any account"
      operationId: linkCard
      parameters:
        - $ref: '#/components/parameters/email'
      requestBody:
        $ref: '#/components/requestBodies/CardRequestBody'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Profile & Partner
  /profile:
    get:
      summary: "Read user's profile info (only for members)"
      operationId: readUserProfile
      security:
        - bearerAuth: []
      tags:
        - profile
      responses:
        '200':
          $ref: '#/components/responses/Member'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    put:
      summary: "Update user's profile info (only for members)"
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      tags:
        - profile
      requestBody:
        $ref: '#/components/requestBodies/MemberRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Member'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /partners/public/{offset}:
    get:
      summary: "Read all partners' info (not require login)"
      operationId: readAllPartners
      parameters:
        - $ref: '#/components/parameters/offset'
      tags:
        - partners
      responses:
        '200':
          $ref: '#/components/responses/Partners'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /partners/{partner_id_slug}:
    get:
      summary: "Read partner's info (not require login)"
      operationId: readPartnerInfo
      parameters:
          - $ref: '#/components/parameters/partner_id_slug'
      tags:
        - partners
      responses:
        '200':
          $ref: '#/components/responses/Partner'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
  /partners/{partner_id}:
    put:
      summary: "Update partner's info"
      operationId: updatePartnerInfo
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
      tags:
        - partners
      requestBody:
        $ref: '#/components/requestBodies/PartnerRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Partner'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Loyalty
  /loyalty/earn/{_to}:
    post:
      summary: ""
      operationId: earnPoints
      parameters:
        - $ref: '#/components/parameters/_to'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/LoyaltyEarnPointsRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/redeem{_to}:
    post:
      summary: ""
      operationId: redeemPoints
      parameters:
        - $ref: '#/components/parameters/_to'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/LoyaltyRedeemPointsRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/redeem/{partner_id}/{offer_id}/{_to}:
    post:
      summary: ""
      operationId: redeemOffer
      parameters:
        - $ref: '#/components/parameters/_to'
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/offer_id'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/LoyaltyRedeemOfferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/balance:
    get:
      summary: ""
      operationId: readBalance
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Balance'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/balance/{_to}:
    get:
      summary: ""
      operationId: readBalanceBypartner
      parameters:
        - $ref: '#/components/parameters/_to'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Balance'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/badge:
    get:
      summary: ""
      operationId: readActivity
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Activity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/badge/{_to}:
    get:
      summary: ""
      operationId: readActivityBypartner
      parameters:
        - $ref: '#/components/parameters/_to'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Activity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/transactions/{offset}:
    get:
      summary: ""
      operationId: readLoyaltyTransactions
      parameters:
        - $ref: '#/components/parameters/offset'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/LoyaltyTransactions'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Loyalty - Offers
  /loyalty/offers/public/{offset}:
    get:
      summary: "Read Offers from every store"
      operationId: readAllOffers
      parameters:
        - $ref: '#/components/parameters/offset'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Offers'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/offers:
    post:
      summary: "Create a new offer"
      operationId: createOffer
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/offers/public/{partner_id_slug}/{offset}:
    get:
      summary: "Read Offers for a specific store"
      operationId: readOffersByStore
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Offers'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/offers/{partner_id_slug}/{offer_id_slug}:
    get:
      summary: "Read a specific Offer"
      operationId: readOffer
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offer_id_slug'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Offer'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/offers/{partner_id}/{offer_id}:
    put:
      summary: "Update an Offer"
      operationId: updateOffer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    delete:
      summary: "Delete an Offer"
      operationId: deleteOffer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Community - Posts & Events
  /community/public/{offset}:
    get:
      summary: "Read public Posts and Events from every store"
      operationId: readPublicPostsAndEvents
      parameters:
        - $ref: '#/components/parameters/offset'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/PostsEvents'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /community/private/{offset}:
    get:
      summary: "Read private Posts and Events from every store"
      operationId: readPrivatePostsAndEvents
      parameters:
        - $ref: '#/components/parameters/offset'
      security:
        - bearerAuth: []
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/PostsEvents'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /community/public/{partner_id_slug}/{offset}:
    get:
      summary: "Read public Posts and Events for a specific store"
      operationId: readPublicPostsAndEventsByStore
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/PostsEvents'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /community/private/{partner_id_slug}/{offset}:
    get:
      summary: "Read private posts and events for a specific store"
      operationId: readPrivatePostsAndEventsByStore
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/PostsEvents'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /posts/private/{offset}:
    get:
      summary: "Read private Posts from every store"
      operationId: readPrivatePosts
      parameters:
        - $ref: '#/components/parameters/offset'
      security:
        - bearerAuth: []
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /posts/public/{offset}:
    get:
      summary: "Read Offers from every store"
      operationId: readPublicPosts
      parameters:
        - $ref: '#/components/parameters/offset'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /posts:
    post:
      summary: "Create a new Post"
      operationId: createPost
      security:
        - bearerAuth: []
      tags:
        - community
      requestBody:
        $ref: '#/components/requestBodies/PostRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /posts/public/{partner_id_slug}/{offset}:
    get:
      summary: "Read public Posts for a specific store"
      operationId: readPublicPostsByStore
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /posts/private/{partner_id_slug}/{offset}:
    get:
      summary: "Read private Posts for a specific store"
      operationId: readPrivatePostsByStore
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /posts/{partner_id_slug}/{post_id_slug}:
   get:
      summary: "Read a specific Post"
      operationId: readPost
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/post_id_slug'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Post'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /posts/{partner_id}/{post_id}:
    put:
      summary: "Update a Post or an Event"
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/post_id'
      tags:
        - community
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    delete:
      summary: "Delete a Post or an Event"
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/post_id'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /events/private/{offset}:
    get:
      summary: "Read private Events from every store"
      operationId: readPrivateEvents
      parameters:
        - $ref: '#/components/parameters/offset'
      security:
        - bearerAuth: []
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Events'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /events/public/{offset}:
    get:
      summary: "Read Events from every store"
      operationId: readPublicEvents
      parameters:
        - $ref: '#/components/parameters/offset'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Events'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /events:
    post:
      summary: "Create a new Event"
      operationId: createEvent
      security:
        - bearerAuth: []
      tags:
        - community
      requestBody:
        $ref: '#/components/requestBodies/EventRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /events/public/{partner_id_slug}/{offset}:
    get:
      summary: "Read public Posts for a specific store"
      operationId: readPublicEventsByStore
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Events'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /events/private/{partner_id_slug}/{offset}:
    get:
      summary: "Read private Posts for a specific store"
      operationId: readPrivateEventsByStore
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Events'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /events/{partner_id_slug}/{event_id_slug}:
   get:
      summary: "Read a specific Event"
      operationId: readEvent
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/event_id_slug'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Event'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /events/{partner_id}/{event_id}:
    put:
      summary: "Update a Event"
      operationId: updateEvent
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/event_id'
      tags:
        - community
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    delete:
      summary: "Delete an Event"
      operationId: deleteEvent
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/event_id'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Microfund
  /microcredit/earn/{partner_id}/{campaign_id}/{_to}:
    post:
      summary: ""
      operationId: earnTokensByPartner
      parameters:
        - $ref: '#/components/parameters/_to'
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      requestBody:
        $ref: '#/components/requestBodies/MicrocreditEarnRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Not_Found'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/earn/{partner_id}/{campaign_id}:
    post:
      summary: ""
      operationId: earnTokens
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      requestBody:
        $ref: '#/components/requestBodies/MicrocreditEarnRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/redeem/{partner_id}/{campaign_id}:
    post:
      summary: ""
      operationId: redeemTokens
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      requestBody:
        $ref: '#/components/requestBodies/MicrocreditRedeemRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/confirm/{partner_id}/{campaign_id}/{support_id}:
    put:
      summary: "Update Support's status (order, confirmation)"
      operationId: confirmSupportPayment
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
        - $ref: '#/components/parameters/support_id'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/transactions/{offset}:
    get:
      summary: ""
      operationId: readMicrocreditTransactions
      parameters:
        - $ref: '#/components/parameters/offset'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/MicrocreditTransactions'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/badge:
    get:
      summary: ""
      operationId: readActivity
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Activity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
          
  # Paths: Microfund - Campaigns
  /microcredit/campaigns/public/{offset}:
    get:
      summary: "Read Public Campaigns from every store"
      operationId: readAllPublicMicrocreditCampaigns
      parameters:
        - $ref: '#/components/parameters/offset'
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/campaigns/private/{offset}:
    get:
      summary: "Read Private Campaigns from every store"
      operationId: readAllPrivateMicrocreditCampaigns
      parameters:
        - $ref: '#/components/parameters/offset'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/campaigns:
    post:
      summary: "Create a new Microcredit Campaign"
      operationId: createMicrocreditCampaign
      security:
        - bearerAuth: []
      tags:
        - microcredit
      requestBody:
        $ref: '#/components/requestBodies/CampaignRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/campaigns/public/{partner_id_slug}/{offset}:
    get:
      summary: "Read Public Campaigns from every store"
      operationId: readPublicMicrocreditCampaignsByStore
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/campaigns/private/{partner_id_slug}/{offset}:
    get:
      summary: "Read Private Campaigns from every store"
      operationId: readPrivateMicrocreditCampaignsByStore
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/offset'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/campaigns/{partner_id_slug}/{campaign_id_slug}:
    get:
      summary: "Read a Campaign"
      operationId: readAMicrocreditCampaign
      parameters:
        - $ref: '#/components/parameters/partner_id_slug'
        - $ref: '#/components/parameters/campaign_id_slug'
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Campaign'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/campaigns/{partner_id}/{campaign_id}:
    put:
      summary: "Update a Microcredit Campaign"
      operationId: updateMicrocreditCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      requestBody:
        $ref: '#/components/requestBodies/CampaignRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    delete:
      summary: "Delete a Microcredit Campaign"
      operationId: deleteMicrocreditCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/campaigns/{partner_id}/{campaign_id}/publish:
    put:
      summary: "Publish a Microcredit Campaign"
      operationId: publishMicrocreditCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/supports:
    get:
      summary: "Read a All Backer's Supports"
      operationId: readAllBackerSupports
      security:
        - bearerAuth: []
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Supports'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/supports/{partner_id}/{campaign_id}:
    get:
      summary: "Read All Supports for a Campaign"
      operationId: readAllSupportsByCampaign
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Supports'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microcredit/supports/{partner_id}/{campaign_id}/{_to}:
    get:
      summary: "Read All Backer's Supports for a Campaign"
      operationId: readBackerSupportsByCampaign
      parameters:
        - $ref: '#/components/parameters/partner_id'
        - $ref: '#/components/parameters/campaign_id'
        - $ref: '#/components/parameters/_to'
      security:
        - bearerAuth: []
      tags:
        - microcredit
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Content
  /content:
    get:
      summary: "Read Content"
      operationId: readContent
      tags:
        - content
      responses:
        '200':
          $ref: '#/components/responses/Contents'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    post:
      summary: "Create a new Content"
      operationId: createContent
      security:
        - bearerAuth: []
      tags:
        - content
      requestBody:
        $ref: '#/components/requestBodies/ContentRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /content/{content_id_name}:
    get:
      summary: "Read Content By Id Or Name"
      operationId: readContentByIdOrName
      parameters:
        - $ref: '#/components/parameters/content_id_name'
      tags:
        - content
      responses:
        '200':
          $ref: '#/components/responses/Content'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    put:
      summary: "Update Content"
      operationId: updateContent
      parameters:
        - $ref: '#/components/parameters/content_id_name'
      security:
        - bearerAuth: []
      tags:
        - content
      requestBody:
        $ref: '#/components/requestBodies/ContentRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

components:
  parameters:
    identifier:
      in: path
      name: identifier
      schema:
        type: string
      required: true
      description: "Member's email or card"
    email:
      in: path
      name: email
      schema:
        type: string
        format: email
      required: true
      description: "Email for user's verification/restoration or Card linking"
    card:
      in: path
      name: card
      schema:
        type: string
      required: true
      description: "Card for Email Linking"
    _to:
      in: path
      name: _to
      schema:
        type: string
      required: true
      description: "Email/Card of Member"
    offset:
      in: path
      name: offset
      schema:
        type: string
      required: true
      description: "Results per Page/Page Number/All or Active"
    partner_id:
      in: path
      name: partner_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected store"
    partner_id_slug:
      in: path
      name: partner_id_slug
      schema:
        type: string
      required: true
      description: "ID or Slug of the selected store"
    offer_id:
      in: path
      name: offer_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected offer"
    offer_id_slug:
      in: path
      name: offer_id_slug
      schema:
        type: string
      required: true
      description: "ID or Slug of the selected offer"
    post_id:
      in: path
      name: post_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected post"
    post_id_slug:
      in: path
      name: post_id_slug
      schema:
        type: string
      required: true
      description: "ID or Slug of the selected post"
    event_id:
      in: path
      name: event_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected event"
    event_id_slug:
      in: path
      name: event_id_slug
      schema:
        type: string
      required: true
      description: "ID or Slug of the selected post"
    campaign_id:
      in: path
      name: campaign_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected campaign"
    campaign_id_slug:
      in: path
      name: campaign_id_slug
      schema:
        type: string
      required: true
      description: "ID or Slug of the selected campaign"
    support_id:
      in: path
      name: support_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected support"
    content_id_name:
      in: path
      name: content_id_name
      schema:
        type: string
      required: true
      description: "ID or Name of the selected content"

  requestBodies:
    # Auth
    AuthenticationRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationDto'
    RegisterRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterDto'
    RegisterMemberRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterMemberDto'
    RegisterpartnerRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterPartnerDto'
    ChangePassInRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassInDto'
    CheckTokenRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckTokenDto'
    ChangePassOutRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassOutDto'
    EmailRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailDto'
    CardRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardDto'
    # Profile & Partner
    MemberRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data:
        # application/x-www-form-urlencoded: # application/json:
          schema:
            $ref: '#/components/schemas/MemberDto'
    PartnerRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data:
        # application/x-www-form-urlencoded: # application/json:
          schema:
            $ref: '#/components/schemas/PartnerDto'

    # Loyalty
    LoyaltyEarnPointsRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoyaltyEarnPointsDto'

    LoyaltyRedeemPointsRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoyaltyRedeemPointsDto'

    LoyaltyRedeemOfferRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoyaltyRedeemOfferDto'

    OfferRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data: #application/json:
          schema:
            $ref: '#/components/schemas/OfferDto'

    # Community
    PostRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data: #application/json:
          schema:
            $ref: '#/components/schemas/PostDto'

    EventRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data: #application/json:
          schema:
            $ref: '#/components/schemas/EventDto'

    # Microfund
    MicrocreditEarnRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MicrocreditEarnTokensDto'

    MicrocreditRedeemRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MicrocreditRedeemTokensDto'

    CampaignRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data: #application/json:
          schema:
            $ref: '#/components/schemas/CampaignDto'

    # Content
    ContentRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContentDto'

  responses:
    # Auth
    Authenticate:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              token:
                $ref: '#/components/schemas/TokenData'
    Verification_Required:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  action:
                    type: string
                    enum: ['need_password_verification', 'need_email_verification']
              code:
                type: number
    Registration_Status:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['email_none', 'email_both', 'email_no_card', 'card_none', 'card_both', 'card_no_email']
              code:
                type: number
    # Profile & Partner
    Member:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Member'
              code:
                type: number
                default: 200


    Partner:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Partner"
              code:
                type: number
                default: 200
    Partners:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Partners"
              code:
                type: number
                default: 200

    # Loyalty - Offers
    Offer:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Offer"
              code:
                type: number
                default: 200
          example:
            data:
              - partner_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                partner_name: "partner 1"
                partner_imageURL: "www.images/assets/partner1.png"
                offer_id: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
                createdAt: "2019-09-10"
                cost: 1000
                description: "Get 10% discount"
                expiresAt: "2019-11-15"
    Offers:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Offers"
              code:
                type: number
                default: 200
          example:
            data:
              - partner_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                partner_name: "partner 1"
                partner_imageURL: "www.images/assets/partner1.png"
                offer_id: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
                createdAt: "2019-09-10"
                cost: 1000
                description: "Get 10% discount"
                expiresAt: "2019-11-15"
              - partner_id: "67a85f64-5r717-4562-b3fc-2c963f66afa6"
                partner_name: "partner 2"
                partner_imageURL: "www.images/assets/partner2.png"
                offer_id: "55454564-5rre7-4ert62-b3fc-c9rtret3f6r9"
                createdAt: "2019-09-15"
                cost: 2000
                description: "1+1 Burger"
                expiresAt: "2019-11-10"
            code: 200

    Balance:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Balance"
              code:
                type: number
                default: 200
          example:
            address: '0x2191eF87E392377ec08E7c08Eb105Ef5448eCED5'
            points: 50
    Activity:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Activity"
              code:
                type: number
                default: 200
          example:
            amount: 500
            stores: 1
            transactions: 20
            rate: 2
            badge: 'Helper'

    LoyaltyTransactions:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/LoyaltyTransactions"
              code:
                type: number
                default: 200

    # Community
    Post:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Post"
              code:
                type: number
                default: 200
          example:
            data:
              partner_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              partner_name: "partner 1"
              partner_slug: "partner_1"
              partner_imageURL: "www.images/assets/profile/partner1.png"
              post_id: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
              post_slug: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
              post_imageURL: "www.images/assets/items/partner1_post1.png"
              title: "And now it begins"
              subtitle: "Some info"
              content: "This is a public post"
              createdAt: "2019-09-10"
            code: 200
    Posts:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Posts"
              code:
                type: number
                default: 200

    Event:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Event"
              code:
                type: number
                default: 200
          example:
            data:
              partner_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              partner_name: "partner 1"
              partner_slug: "partner_1"
              partner_imageURL: "www.images/assets/profile/partner1.png"
              event_id: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
              event_slug: "come_to_party"
              event_imageURL: "www.images/assets/items/partner1_event_1.png"
              title: "Come to party"
              subtitle: "Some info"
              description: "This is a call to our community"
              location: "My Street, My City"
              dateTime: 1583229710000
              createdAt: "2019-09-10"
            code: 200
    Events:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Events"
              code:
                type: number
                default: 200

    PostsEvents:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/PostsEvents"
              code:
                type: number
                default: 200

    # Microfund - Campaigns
    Campaign:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Campaign"
              code:
                type: number
                default: 200
    Campaigns:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Campaigns"
              code:
                type: number
                default: 200

    Supports:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Supports"
              code:
                type: number
                default: 200
    Payment:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Payment"
              code:
                type: number
                default: 200

    MicrocreditTransactions:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/MicrocreditTransactions"
              code:
                type: number
                default: 200

    # Content
    Content:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Content"
              code:
                type: number
                default: 200
    Contents:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Contents"
              code:
                type: number
                default: 200

    # Create, Updated, Email Send, Error
    Created:
      description: Created (201)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
          example:
            code: 201
            message: "Campaign successfully created!"
    Updated:
      description: Updated (200)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
          example:
            code: 200
            message: "User's Profile successfully updated!"
    Email_Sent:
      description: Email Sent (200)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
          example:
            code: 200
            message: "An email has been sent. Follow the link to verify your address!"

    Bad_Request:
      description: Bad Request (400)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: "Something wrong happes!"
    Unauthorized:
      description: Unauthorized (401)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: "Something wrong happes!"
    Forbidden:
      description: Forbidden (403)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 403
            message: "Something wrong happes!"
    Not_Found:
      description: "Not Found (404) -
        Auth (/auth) ['Wrong Credentials', 'Wrong Token', 'User Exists', 'User has Email', 'User has Card']
        Offer (/loyalty/offers/:partner_id/:offer_id) ['Offer does not Exist']
        Post (/loyalty/offers/:partner_id/:post_id) ['Post does not Exist']
        Event (/loyalty/offers/:partner_id/:event_id) ['Event does not Exist']
        Loyalty (/loyalty) ['Uses does not Exist', 'Offer does not Exist', 'Not enough Tokens', 'Expired Offer']"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: "Something wrong happes!"
    Unprocessable_Entity:
      description: "422 Unprocessable Entity - [DB Error, Blockchain Error, Email Error]"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 422
            message: "Something wrong happes!"

  schemas:
    # Request - Auth
    AuthenticationDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    RegisterDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    RegisterMemberDto:
      type: object
      properties:
        card:
          type: string
        email:
          type: string
          format: email
      minProperties: 1
      maxProperties: 2
    RegisterpartnerDto:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        subtitle:
          type: string
        description:
          type: string
        imageURL:
          type: string
          format: binary
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
        phone:
          type: number
          format: int64
        websiteURL:
          type: string
          format: uri
        street:
          type: string
        postCode:
          type: number
          format: int64
        city:
          type: string
        lat:
          type: number
          format: float
        long:
          type: number
          format: float
        nationalBank:
          type: string
        pireausBank:
          type: string
        eurobank:
          type: string
        alphaBank:
          type: string
        rtnerypal:
          type: string
        timetable:
          type: string
    ChangePassInDto:
      type: object
      properties:
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
      required:
        - oldPassword
        - newPassword
    CheckTokenDto:
      type: object
      properties:
        token:
          type: string
          format: uuid
      required:
        - token
    ChangePassOutDto:
      type: object
      properties:
        token:
          type: string
          format: uuid
        newPassword:
          type: string
          format: password
        verPassword:
          type: string
          format: password
      required:
        - token
        - newPassword
        - verPassword
    EmailDto:
      type: object
      properties:
        email:
          type: string
          format: email
    CardDto:
      type: object
      properties:
        card:
          type: string

    # Request - Profile & Partner
    MemberDto:
      type: object
      properties:
        name:
          type: string
        imageURL:
          type: string
          format: binary
    PartnerDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageURL:
          type: string
          format: binary
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
        phone:
          type: number
          format: int64
        websiteURL:
          type: string
          format: uri
        street:
          type: string
        postCode:
          type: number
          format: int64
        city:
          type: string
        lat:
          type: number
          format: float
        long:
          type: number
          format: float
        nationalBank:
          type: string
        pireausBank:
          type: string
        eurobank:
          type: string
        alphaBank:
          type: string
        paypal:
          type: string
        timetable:
          type: string
      required:
        - name
        - imageURL
        - sector
        - street
        - postCode
        - city
        - phone

    # Request - Community
    PostDto:
          type: object
          properties:
            imageURL:
              type: string
              format: binary
            title:
              type: string
            subtitle:
              type: string
            content:
              type: string
            access:
              type: string
              enum: [public, private, partners]

    EventDto:
          type: object
          properties:
            imageURL:
              type: string
              format: binary
            title:
              type: string
            subtitle:
              type: string
            description:
              type: string
            access:
              type: string
              enum: [public, private, partners]
            dateTime:
              type: number
            location:
              type: string

    # Request - Loyalty
    OfferDto:
      type: object
      properties:
        imageURL:
          type: string
          format: binary
        title:
          type: string
        subtitle:
          type: string
        description:
          type: string
        cost:
          type: number
        expiresAt:
          type: number

    LoyaltyEarnPointsDto:
      type: object
      properties:
        password:
          type: string
          format: password
        _amount:
          type: number

    LoyaltyRedeemPointsDto:
      type: object
      properties:
        password:
          type: string
          format: password
        _points:
          type: number

    LoyaltyRedeemOfferDto:
      type: object
      properties:
        password:
          type: string
          format: password
        _points:
          type: number
        quantity:
          type: number

    # Request - Microfund
    CampaignDto:
      type: object
      properties:
        imageURL:
          type: string
          format: binary
        title:
          type: string
        subtitle:
          type: string
        terms:
          type: string
        access:
          type: string
          enum: [public, private, partners]
        description:
          type: string
        category:
          type: string
        quantitative:
          type: boolean
        stepAmount:
          type: number
        minAllowed:
          type: number
        maxAllowed:
          type: number
        maxAmount:
          type: number
        redeemStarts:
          type: number
        redeemEnds:
          type: number
        startsAt:
          type: number
        expiresAt:
          type: number

    MicrocreditEarnTokensDto:
      type: object
      properties:
        _amount:
          type: string
          format: password
        method:
          type: string
          enum: [nationalBank, pireausBank, eurobank, alphaBank, paypal, store]
        paid:
          type: boolean

    MicrocreditRedeemTokensDto:
      type: object
      properties:
        _tokens:
          type: number

    # Request - Content
    ContentDto:
      type: object
      properties:
        name:
          type: string
        el_title:
          type: string
        en_title:
          type: string
        el_content:
          type: string
        en_content:
          type: string

    # Response - Auth
    TokenData:
      type: object
      properties:
        token:
          type: string
          format: uuid
        expiresIn:
          type: string
          format: date
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        imageURL:
          type: string
          format: uri
        access:
          type: string
          enum: [member, partner, admin]
        email_verified:
          type: boolean
        pass_verified:
          type: boolean

    # Response - Profile & Partner
    Member:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        imageURL:
          type: string
          format: uri
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date
    Partner:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        imageURL:
          type: string
          format: uri
        subtitle:
          type: string
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date
        description:
          type: string
        timetable:
          type: string
        payments:
          type: object
          properties:
            nationalBank:
              type: number
            pireausBank:
              type: string
            eurobank:
              type: string
            alphaBank:
              type: string
            paypal:
              type: string
        contact:
          type: object
          properties:
            phone:
              type: number
              format: int64
            websiteURL:
              type: string
              format: uri
        address:
          type: object
          properties:
            street:
              type: string
            postCode:
              type: string
            city:
              type: string
    Partners:
      type: array
      items:
        $ref: "#/components/schemas/Partner"

    # Response - Loyalty
    Balance:
      type: object
      properties:
        address:
          type: string
          format: address
        points:
          type: number

    Activity:
      type: object
      properties:
        amount:
          type: string
          format: address
        stores:
          type: number
        transactions:
          type: boolean
        rate:
          type: number
        badge:
          type: string
          enum: [Supporter, Helper, One of Us]

    LoyaltyTransaction:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        type:
          type: string
          enum: [EarnPoints, RedeemPoints]
        partner_id:
          type: string
          format: uuid
          member_id:
          type: string
          format: uuid
        data:
          type: object
          properties:
            partner_name:
              type: string
            partner_email:
              type: string
              format: email
            points:
              type: number
            amount:
              type: number
            offer_id:
              type: string
              format: uuid
            offer_title:
              type: string
        tx:
          type: string
        createdAt:
          type: string
          format: date
    LoyaltyTransactions:
      type: array
      items:
        $ref: '#/components/schemas/LoyaltyTransaction'

    Offer:
      type: object
      properties:
        partner_id:
          type: string
          format: uuid
        partner_name:
          type: string
        partner_slug:
          type: string
        partner_imageURL:
          type: string
          format: uri
        offer_id:
          type: string
          format: uuid
        title:
          type: string
        subtitle:
          type: string
        offer_slug:
          type: string
        imageURL:
          type: string
          format: uri
        description:
          type: string
        cost:
          type: number
        expiresAt:
          type: string
          format: date
        createdAt:
          type: string
          format: date
    Offers:
      type: array
      items:
        $ref: '#/components/schemas/Offer'

    # Response - Community Post & Events
    Post:
      type: object
      properties:
        partner_id:
          type: string
          format: uuid
        partner_name:
          type: string
        partner_slug:
          type: string
        partner_imageURL:
          type: string
          format: uri
        post_id:
          type: string
          format: uuid
        post_slug:
          type: string
          format: uri
        post_imageURL:
          type: string
          format: uri
        title:
          type: string
        subtitle:
          type: string
        content:
          type: string
        access:
          type: string
          enum: [public, private, partners]
        createdAt:
          type: string
          format: date
    Posts:
      type: array
      items:
        $ref: '#/components/schemas/Post'

    Event:
      type: object
      properties:
        partner_id:
          type: string
          format: uuid
        partner_name:
          type: string
        partner_slug:
          type: string
        partner_imageURL:
          type: string
          format: uri

        event_id:
          type: string
          format: uuid
        event_slug:
          type: string
          format: uri
        event_imageURL:
          type: string
          format: uri
        title:
          type: string
        subtitle:
          type: string
        content:
          type: string
        access:
          type: string
          enum: [public, private, partners]
        dateTime:
          type: number
        location:
          type: string
        createdAt:
          type: string
          format: date
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'

    PostEvent:
      type: object
      properties:
        partner_id:
          type: string
          format: uuid
        partner_name:
          type: string
        partner_slug:
          type: string
        partner_imageURL:
          type: string
          format: uri

        post_event_id:
          type: string
          format: uuid
        post_event_slug:
          type: string
          format: uri
        post_event_imageURL:
          type: string
          format: uri
        type:
          type: string
          enum: [post, event]
        title:
          type: string
        subtitle:
          type: string
        content:
          type: string
        access:
          type: string
          enum: [public, private, partners]
        dateTime:
          type: number
        location:
          type: string
        createdAt:
          type: string
          format: date
    PostsEvents:
      type: array
      items:
        $ref: '#/components/schemas/PostEvent'

    # Response - Microfund Campaigns
    Campaign:
      type: object
      properties:
        partner_id:
          type: string
          format: uuid
        partner_name:
          type: string
        partner_slug:
          type: string
        partner_imageURL:
          type: string
          format: uri
        partner_payments:
          type: object
          properties:
            nationalBank:
              type: string
            pireausBank:
              type: string
            eurobank:
              type: string
            alphaBank:
              type: string
            paypal:
              type: string
        campaign_id:
          type: string
          format: uuid
        campaign_slug:
          type: string
        campaign_imageURL:
          type: string
          format: uri
        title:
          type: string
        subtitle:
          type: string
        terms:
          type: string
        description:
          type: string
        category:
          type: string
        access:
          type: string
          enum: [public, private, partners]
        quantitative:
          type: boolean
        stepAmount:
          type: number
        minAllowed:
          type: number
        maxAllowed:
          type: number
        maxAmount:
          type: number
        redeemStarts:
          type: number
          format: Date
        redeemEnds:
          type: number
          format: Date
        startsAt:
          type: number
          format: Date
        expiresAt:
          type: number
          format: Date
        status:
          type: string
          enum: [draft, published]
        confirmedTokens:
          type: object
          properties:
            initialTokens:
              type: number
            redeemedTokens:
              type: number
        orderedTokens:
          type: object
          properties:
            initialTokens:
              type: number
            redeemedTokens:
              type: number
        createdAt:
          type: string
          format: Date
    Campaigns:
      type: array
      items:
        $ref: '#/components/schemas/Campaign'

    Support:
      type: object
      properties:
        partner_id:
          type: string
          format: uuid
        partner_payments:
          type: object
          properties:
            nationalBank:
              type: string
            pireausBank:
              type: string
            eurobank:
              type: string
            alphaBank:
              type: string
            paypal:
              type: string
        campaign_id:
          type: string
          format: uuid
        support_id:
          type: string
          format: uuid
        backer_id:
          type: string
          format: uuid
        payment_id:
          type: string
          format: uuid
        initialTokens:
          type: number
        redeemedTokens:
          type: number
        method:
          type: string
          enum: [nationalBank, pireausBank, eurobank, alphaBank, paypal]
        status:
          type: string
          enum: [order, confirmation]
    Supports:
      type: array
      items:
        $ref: '#/components/schemas/Support'

    Payment:
      type: object
      properties:
        support_id:
          type: string
          format: uuid
        method:
          type: string
          enum: [store, nationalBank, pireausBank, eurobank, alphaBank, paypal]
        status:
          type: string
          enum: [order, confirmation]
        payment_id:
          type: string
          format: uuid
        how:
          type: string

    MicrocreditTransaction:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        type:
          type: string
          enum: [PromiseFund, ReceiveFund, RevertFund, SpendFund]
        partner_id:
          type: string
          format: uuid
        member_id:
          type: string
          format: uuid
        data:
          type: object
          properties:
              campaign_id:
                type: string
                format: uuid
              campaign_title:
                type: string
              address:
                type: string
                format: address
              support_id:
                type: string
                format: uuid
              contractIndex:
                type: number
              tokens:
                type: number
        tx:
          type: string
        createdAt:
          type: string
          format: date
    MicrocreditTransactions:
      type: array
      items:
        $ref: '#/components/schemas/MicrocreditTransaction'

    # Response - Content
    Content:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        el_title:
          type: string
        en_title:
          type: string
        el_content:
          type: string
        en_content:
          type: string
    Contents:
      type: array
      items:
        $ref: '#/components/schemas/Content'

  # Response - Typical Responses (Success, Error)
    Success:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
